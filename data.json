[{"model": "blog.comment", "pk": 1, "fields": {"creator": 2, "content": "Great overview! Very helpful for new developers.", "content_type": 8, "object_id": 1, "created_at": "2025-06-05T17:16:03.317Z", "modified_at": "2025-06-05T17:16:03.317Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 3, "content": "Looking forward to the next part of this series.", "content_type": 8, "object_id": 1, "created_at": "2025-06-05T17:16:03.385Z", "modified_at": "2025-06-05T17:16:03.385Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "The section on prefetch_related was exactly what I needed. Thanks!", "content_type": 8, "object_id": 2, "created_at": "2025-06-05T17:16:03.949Z", "modified_at": "2025-06-05T17:16:03.949Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 2, "content": "Clear and concise explanation. Well done.", "content_type": 8, "object_id": 4, "created_at": "2025-06-05T17:16:04.816Z", "modified_at": "2025-06-05T17:16:04.816Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 3, "content": "This is a must-read for all Django developers.", "content_type": 8, "object_id": 5, "created_at": "2025-06-05T17:16:05.241Z", "modified_at": "2025-06-05T17:16:05.241Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 1, "content": "Fantastic tutorial! DRF makes API development so much easier.", "content_type": 8, "object_id": 6, "created_at": "2025-06-05T17:16:05.799Z", "modified_at": "2025-06-05T17:16:05.799Z"}}, {"model": "blog.comment", "pk": 7, "fields": {"creator": 2, "content": "Excellent choice of topic.", "content_type": 8, "object_id": 6, "created_at": "2025-06-05T17:16:05.865Z", "modified_at": "2025-06-05T17:16:05.865Z"}}, {"model": "blog.comment", "pk": 8, "fields": {"creator": 1, "content": "I've always been a bit confused about when to use which. This clears things up.", "content_type": 8, "object_id": 8, "created_at": "2025-06-05T17:16:06.959Z", "modified_at": "2025-06-05T17:16:06.959Z"}}, {"model": "blog.comment", "pk": 9, "fields": {"creator": 2, "content": "This is crucial advice for anyone starting a new Django project.", "content_type": 8, "object_id": 10, "created_at": "2025-06-05T17:16:07.914Z", "modified_at": "2025-06-05T17:16:07.914Z"}}, {"model": "blog.comment", "pk": 10, "fields": {"creator": 3, "content": "I wish I had known this when I started my first project. Great tip!", "content_type": 8, "object_id": 10, "created_at": "2025-06-05T17:16:07.977Z", "modified_at": "2025-06-05T17:16:07.977Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "django"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "python"}}, {"model": "blog.tag", "pk": 3, "fields": {"value": "webdev"}}, {"model": "blog.tag", "pk": 4, "fields": {"value": "orm"}}, {"model": "blog.tag", "pk": 5, "fields": {"value": "database"}}, {"model": "blog.tag", "pk": 6, "fields": {"value": "performance"}}, {"model": "blog.tag", "pk": 7, "fields": {"value": "deployment"}}, {"model": "blog.tag", "pk": 8, "fields": {"value": "nginx"}}, {"model": "blog.tag", "pk": 9, "fields": {"value": "gunicorn"}}, {"model": "blog.tag", "pk": 10, "fields": {"value": "templates"}}, {"model": "blog.tag", "pk": 11, "fields": {"value": "frontend"}}, {"model": "blog.tag", "pk": 12, "fields": {"value": "security"}}, {"model": "blog.tag", "pk": 13, "fields": {"value": "websec"}}, {"model": "blog.tag", "pk": 14, "fields": {"value": "drf"}}, {"model": "blog.tag", "pk": 15, "fields": {"value": "api"}}, {"model": "blog.tag", "pk": 16, "fields": {"value": "rest"}}, {"model": "blog.tag", "pk": 17, "fields": {"value": "datascience"}}, {"model": "blog.tag", "pk": 18, "fields": {"value": "numpy"}}, {"model": "blog.tag", "pk": 19, "fields": {"value": "pandas"}}, {"model": "blog.tag", "pk": 20, "fields": {"value": "views"}}, {"model": "blog.tag", "pk": 21, "fields": {"value": "cbv"}}, {"model": "blog.tag", "pk": 22, "fields": {"value": "fbv"}}, {"model": "blog.tag", "pk": 23, "fields": {"value": "async"}}, {"model": "blog.tag", "pk": 24, "fields": {"value": "channels"}}, {"model": "blog.tag", "pk": 25, "fields": {"value": "websockets"}}, {"model": "blog.tag", "pk": 26, "fields": {"value": "authentication"}}, {"model": "blog.tag", "pk": 27, "fields": {"value": "usermode"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2025-06-05T17:16:02.809Z", "modified_at": "2025-06-05T17:16:02.809Z", "title": "Getting Started with Django", "slug": "getting-started-with-django", "summary": "A beginner's guide to setting up your first Django project.", "content": "<h2>Your First Steps with Django</h2><p>In this tutorial, we will walk through the steps to create a new Django project from scratch. We will cover the following key areas:</p><ul><li>Installation of Django</li><li>Creating a new project using <code>django-admin</code></li><li>Understanding the project structure</li><li>Running the development server for the first time.</li></ul><p>By the end, you'll have a basic Django site up and running, ready for you to build upon!</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 2, 3]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 2, "created_at": "2025-06-05T17:16:03.450Z", "modified_at": "2025-06-05T17:16:03.450Z", "title": "Advanced Django ORM Techniques", "slug": "advanced-django-orm-techniques", "summary": "Explore the power of Django's Object-Relational Mapper.", "content": "<h2>Unlocking Performance with the ORM</h2><p>The Django ORM is incredibly powerful. This post dives into advanced topics to help you write more efficient queries.</p><p>We will explore:</p><ul><li>Query optimization using <code>select_related</code> for foreign key relationships.</li><li>The power of <code>prefetch_related</code> for many-to-many and reverse foreign key lookups.</li><li>Using conditional expressions with <code>Case</code> and <code>When</code>.</li><li>Leveraging database functions directly in your queries.</li></ul><p>Mastering these will significantly improve your application's performance.</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 4, 5, 6]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 3, "created_at": "2025-06-05T17:16:04.009Z", "modified_at": "2025-06-05T17:16:04.009Z", "title": "Deploying Django to Production", "slug": "deploying-django-to-production", "summary": "A step-by-step guide to deploying your Django application.", "content": "<h2>From Development to Production</h2><p>Taking your Django app live can be daunting. This guide breaks it down into manageable steps.</p><p><strong>Key Topics Covered:</strong></p><ul><li>Server setup with a production-ready WSGI server like <strong>Gunicorn</strong>.</li><li>Using a web server like <strong>Nginx</strong> to serve static files and proxy requests.</li><li>Configuring your database for a production environment.</li><li>Essential security best practices, including setting <code>DEBUG = False</code>.</li></ul>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 7, 8, 9]}}, {"model": "blog.post", "pk": 4, "fields": {"author": 1, "created_at": "2025-06-05T17:16:04.472Z", "modified_at": "2025-06-05T17:16:04.472Z", "title": "Understanding Django Templates", "slug": "understanding-django-templates", "summary": "Learn how to create dynamic HTML with the Django template language.", "content": "<h2>The Django Template Language (DTL)</h2><p>Django's template engine is a key part of the framework's MVT (Model-View-Template) architecture. We will explore the core concepts:</p><ul><li><strong>Template Inheritance:</strong> Use <code>{% extends 'base.html' %}</code> to keep your code DRY.</li><li><strong>Template Tags:</strong> Control logic with tags like <code>{% if %}</code> and <code>{% for %}</code>.</li><li><strong>Filters:</strong> Modify variable output with filters like <code>{{ post.published_at|date:\"d M Y\" }}</code>.</li></ul><p>This is essential for building dynamic and maintainable web pages.</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 10, 11]}}, {"model": "blog.post", "pk": 5, "fields": {"author": 2, "created_at": "2025-06-05T17:16:04.871Z", "modified_at": "2025-06-05T17:16:04.871Z", "title": "Securing Your Django Application", "slug": "securing-your-django-application", "summary": "Best practices for keeping your Django project safe from vulnerabilities.", "content": "<h2>Security is Not an Afterthought</h2><p>This post covers common web vulnerabilities and how Django's built-in features help you prevent them. Follow these best practices to keep your application and user data secure.</p><h3>Common Threats:</h3><ul><li><strong>Cross-Site Scripting (XSS):</strong> Django templates auto-escape variables by default to prevent this.</li><li><strong>Cross-Site Request Forgery (CSRF):</strong> Use the <code>{% csrf_token %}</code> tag in all your POST forms.</li><li><strong>SQL Injection:</strong> The Django ORM protects you by using parameterized queries.</li></ul>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 12, 13]}}, {"model": "blog.post", "pk": 6, "fields": {"author": 3, "created_at": "2025-06-05T17:16:05.304Z", "modified_at": "2025-06-05T17:16:05.304Z", "title": "Building a REST API with Django Rest Framework", "slug": "building-a-rest-api-with-drf", "summary": "A practical guide to creating powerful APIs with DRF.", "content": "<h2>APIs with DRF</h2><p>Django Rest Framework (DRF) is the go-to library for building APIs in Django. This tutorial will guide you through creating a fully functional REST API.</p><h3>Core Components:</h3><ul><li><code>Serializers</code>: To convert complex data types like querysets and model instances into native Python datatypes that can then be easily rendered into JSON.</li><li><code>ViewSets</code>: To handle the logic for a set of related views in a single class.</li><li><code>Routers</code>: To automatically generate the URL conf for your ViewSets.</li></ul><p>We will also cover authentication and permissions to secure your API endpoints.</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 14, 15, 16]}}, {"model": "blog.post", "pk": 7, "fields": {"author": 1, "created_at": "2025-06-05T17:16:05.929Z", "modified_at": "2025-06-05T17:16:05.929Z", "title": "Python for Data Science", "slug": "python-for-data-science", "summary": "An introduction to the libraries that make Python a data science powerhouse.", "content": "<h2>The Language of Data</h2><p>Python is the language of choice for data science. In this article, we'll get an overview of essential libraries that form the foundation of the Python data science stack.</p><h3>Key Libraries:</h3><ul><li><strong>NumPy:</strong> For fundamental numerical computation and multi-dimensional arrays.</li><li><strong>Pandas:</strong> For data manipulation and analysis, primarily through its famous DataFrame object.</li><li><strong>Matplotlib:</strong> For creating static, animated, and interactive data visualizations.</li></ul><p>This is the starting point for your data science journey.</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [2, 17, 18, 19]}}, {"model": "blog.post", "pk": 8, "fields": {"author": 2, "created_at": "2025-06-05T17:16:06.440Z", "modified_at": "2025-06-05T17:16:06.440Z", "title": "Django Class-Based Views vs. Function-Based Views", "slug": "cbv-vs-fbv", "summary": "A comparison to help you decide which to use in your projects.", "content": "<h2>Choosing Your View Style</h2><p>Django offers two ways to write views: <strong>Function-Based Views (FBVs)</strong> and <strong>Class-Based Views (CBVs)</strong>. This post breaks down the pros and cons of each.</p><h3>Function-Based Views (FBVs)</h3><p>Simple, explicit, and easy to read. Great for straightforward views that handle a single HTTP method.</p><h3>Class-Based Views (CBVs)</h3><p>Highly reusable and extensible, following the DRY principle. Ideal for more complex views that can benefit from inheritance and mixins.</p><p>Understanding both will make you a more effective Django developer.</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 20, 21, 22]}}, {"model": "blog.post", "pk": 9, "fields": {"author": 3, "created_at": "2025-06-05T17:16:07.021Z", "modified_at": "2025-06-05T17:16:07.021Z", "title": "Asynchronous Django with Channels", "slug": "asynchronous-django-with-channels", "summary": "Learn how to handle WebSockets and other long-lived connections in Django.", "content": "<h2>Real-Time Django</h2><p>Django was traditionally synchronous, but with the <strong>Channels</strong> library, you can now write asynchronous code to handle protocols that require long-lived connections.</p><p>This opens up possibilities for real-time applications such as:</p><ul><li>Live chat applications</li><li>Real-time notifications</li><li>Streaming data dashboards</li></ul><p>Channels integrates into the Django ecosystem, extending its capabilities beyond the standard request-response cycle.</p>", "published_at": "2025-06-05T17:21:33.916Z", "tags": [1, 23, 24, 25]}}, {"model": "blog.post", "pk": 10, "fields": {"author": 1, "created_at": "2025-06-05T17:16:07.510Z", "modified_at": "2025-06-05T17:17:50.570Z", "title": "Custom User Model in Django", "slug": "custom-user-model-django", "summary": "Why and how to start a new Django project with a custom user model.", "content": "<h2>The Best Practice for New Projects</h2><p>It's highly recommended to start <strong>every new Django project</strong> with a custom user model. While it may seem like extra work upfront, it provides immense flexibility for the future.</p><h3>Why do it?</h3><p>Once you've run your first migration, changing the user model is very difficult. Starting with a custom model, even if it's identical to the default User, means you can easily add fields like a profile picture, date of birth, or subscription status later on without complex migrations.</p><p>This post provides a clear, step-by-step guide on how to set one up from the very beginning of your project.</p>", "published_at": "2025-06-05T17:17:46Z", "tags": [1, 26, 27]}}, {"model": "blango_auth.user", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$d0Noa2VOY3J0SDJmclhJamhxSlZtOA$9OV2vAAx8mDYfsOwnaeZ2g", "last_login": null, "is_superuser": true, "username": "codio", "first_name": "", "last_name": "", "email": "codio.admin@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-06-05T17:01:18.563Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.user", "pk": 2, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$YUhCSkZWYzlrakdGVExJWmEzT2MyZA$boyRNJNAqo856+HLuvrlyQ", "last_login": "2025-06-05T17:17:27.291Z", "is_superuser": true, "username": "admin", "first_name": "", "last_name": "", "email": "admin@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-06-05T17:01:45.534Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.user", "pk": 3, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$Mno0MEVlbjVMTlpnZk95Yjk4SzRGcA$KVNArDEsWmOioV9C/AJe7w", "last_login": null, "is_superuser": true, "username": "codewithpram", "first_name": "", "last_name": "", "email": "code.pramv@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-06-05T17:02:40.980Z", "groups": [], "user_permissions": []}}]